// Code generated by kok; DO NOT EDIT.
// github.com/RussellLuo/kok

package server

import (
	"context"

	"github.com/RussellLuo/kok/pkg/httpoption"
	"github.com/RussellLuo/validating/v2"
	"github.com/go-kit/kit/endpoint"
	"github.com/minskylab/hasura-auth-webhook/services/structures"
)

type PostLoginRequest struct {
	Body structures.PostLoginReq `json:"body"`
}

// ValidatePostLoginRequest creates a validator for PostLoginRequest.
func ValidatePostLoginRequest(newSchema func(*PostLoginRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*PostLoginRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type PostLoginResponse struct {
	Res *structures.PostLoginRes `json:"res"`
	Err error                    `json:"-"`
}

func (r *PostLoginResponse) Body() interface{} { return r.Res }

// Failed implements endpoint.Failer.
func (r *PostLoginResponse) Failed() error { return r.Err }

// MakeEndpointOfPostLogin creates the endpoint for s.PostLogin.
func MakeEndpointOfPostLogin(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*PostLoginRequest)
		res, err := s.PostLogin(
			ctx,
			req.Body,
		)
		return &PostLoginResponse{
			Res: res,
			Err: err,
		}, nil
	}
}

type PostSignupRequest struct {
	Body structures.PostSignupReq `json:"body"`
}

// ValidatePostSignupRequest creates a validator for PostSignupRequest.
func ValidatePostSignupRequest(newSchema func(*PostSignupRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*PostSignupRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type PostSignupResponse struct {
	Res *structures.PostSignupRes `json:"res"`
	Err error                     `json:"-"`
}

func (r *PostSignupResponse) Body() interface{} { return r.Res }

// Failed implements endpoint.Failer.
func (r *PostSignupResponse) Failed() error { return r.Err }

// MakeEndpointOfPostSignup creates the endpoint for s.PostSignup.
func MakeEndpointOfPostSignup(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*PostSignupRequest)
		res, err := s.PostSignup(
			ctx,
			req.Body,
		)
		return &PostSignupResponse{
			Res: res,
			Err: err,
		}, nil
	}
}

type PostWebhookRequest struct {
	Body structures.PostWebhookReq `json:"body"`
}

// ValidatePostWebhookRequest creates a validator for PostWebhookRequest.
func ValidatePostWebhookRequest(newSchema func(*PostWebhookRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*PostWebhookRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type PostWebhookResponse struct {
	Res *structures.PostWebhookRes `json:"res"`
	Err error                      `json:"-"`
}

func (r *PostWebhookResponse) Body() interface{} { return r.Res }

// Failed implements endpoint.Failer.
func (r *PostWebhookResponse) Failed() error { return r.Err }

// MakeEndpointOfPostWebhook creates the endpoint for s.PostWebhook.
func MakeEndpointOfPostWebhook(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*PostWebhookRequest)
		res, err := s.PostWebhook(
			ctx,
			req.Body,
		)
		return &PostWebhookResponse{
			Res: res,
			Err: err,
		}, nil
	}
}
